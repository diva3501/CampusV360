import React from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable'; // MODIFIED IMPORT
import './DigitalPortfolio.css'; 

const DigitalPortfolio = () => {
  // Static data for the demo portfolio
  const studentData = { name: 'John Doe', rollNumber: 'CS21B001', branch: 'Computer Science', year: 'Final Year', gpa: '8.7' };
  const approvedActivities = [
    { title: 'Machine Learning Certification', type: 'Certification', date: '2025-01-15', credits: 3, institution: 'Coursera' },
    { title: 'Industry Internship', type: 'Internship', date: '2025-06-20', credits: 4, institution: 'Google Inc.' },
    { title: 'Volunteer Work', type: 'Volunteer', date: '2024-11-12', credits: 2, institution: 'Local NGO' }
  ];
  const academicRecord = [
    { semester: 'Semester 1', gpa: 8.5 }, { semester: 'Semester 2', gpa: 8.7 },
    { semester: 'Semester 3', gpa: 8.9 }, { semester: 'Semester 4', gpa: 8.8 },
    { semester: 'Semester 5', gpa: 8.6 }
  ];
  const skills = ['JavaScript', 'React.js', 'Node.js', 'Python', 'Machine Learning', 'SQL', 'Git', 'AWS', 'Data Structures', 'Algorithms'];

  const generateAndDownloadPdf = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    
    // Header
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(22);
    doc.text('Digital Academic Portfolio', pageWidth / 2, 20, { align: 'center' });
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(14);
    doc.text(studentData.name, 14, 35);
    doc.setFontSize(11);
    doc.setTextColor(100);
    doc.text(`${studentData.rollNumber} | ${studentData.branch}`, 14, 42);
    doc.text(`Current CGPA: ${studentData.gpa}`, 14, 49);

    // Academic Performance Table
    doc.setFontSize(14);
    doc.setTextColor(0);
    doc.text('Academic Performance', 14, 65);
    
    // MODIFIED: Call autoTable as a function
    autoTable(doc, {
      head: [['Semester', 'GPA']],
      body: academicRecord.map(rec => [rec.semester, rec.gpa]),
      startY: 70,
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
    });

    // Approved Activities Table
    // MODIFIED: Use doc.lastAutoTable.finalY to find the end of the previous table
    const lastTableY = doc.lastAutoTable.finalY;
    doc.text('Approved Activities & Achievements', 14, lastTableY + 15);

    // MODIFIED: Call autoTable as a function
    autoTable(doc, {
      head: [['Title', 'Type', 'Institution', 'Credits']],
      body: approvedActivities.map(act => [act.title, act.type, act.institution, act.credits]),
      startY: lastTableY + 20,
      theme: 'grid',
      headStyles: { fillColor: [80, 227, 194] },
    });

    // Skills Section
    const lastTableY2 = doc.lastAutoTable.finalY;
    doc.text('Technical Skills', 14, lastTableY2 + 15);
    doc.setFontSize(10);
    doc.setTextColor(80);
    const skillsText = doc.splitTextToSize(skills.join(' • '), pageWidth - 28);
    doc.text(skillsText, 14, lastTableY2 + 21);
    
    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(9);
      doc.setTextColor(150);
      doc.text(`Generated by CampusV360 on ${new Date().toLocaleDateString()}`, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    }

    doc.save(`${studentData.name}_Portfolio.pdf`);
  };

  return (
    <div className="portfolio-container fade-in">
      <div className="card">
        <div className="generator-header">
          <h2>Digital Portfolio Generator</h2>
          <p>Create a comprehensive digital portfolio showcasing your academic journey.</p>
        </div>

        <div className="portfolio-preview-box">
          <h3>Portfolio Preview</h3>
          <div className="student-header-preview">
            <div className="student-icon"><span>👨‍🎓</span></div>
            <div>
              <h2>{studentData.name}</h2>
              <p>{studentData.rollNumber} | {studentData.branch}</p>
              <p>Current CGPA: {studentData.gpa}</p>
            </div>
          </div>

          <div className="preview-grid">
            <div>
              <h4>📊 Academic Performance</h4>
              <div className="list-container">
                {academicRecord.map((record, index) => (
                  <div key={index} className="academic-record-item">
                    <span>{record.semester}</span>
                    <strong>GPA: {record.gpa}</strong>
                  </div>
                ))}
              </div>
            </div>
            <div>
              <h4>🏆 Approved Activities</h4>
              <div className="list-container">
                {approvedActivities.map((activity, index) => (
                  <div key={index} className="activity-item-preview">
                    <h5>{activity.title}</h5>
                    <p>{activity.type} | {activity.credits} credits</p>
                    <small>{activity.institution}</small>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="skills-preview-section">
            <h4>💻 Technical Skills</h4>
            <div className="skills-container">
              {skills.map((skill, index) => (
                <span key={index} className="skill-tag">{skill}</span>
              ))}
            </div>
          </div>
        </div>

        <div className="generate-button-container">
          <button onClick={generateAndDownloadPdf} className="button generate-button">
            🚀 Generate & Download PDF
          </button>
        </div>
      </div>
    </div>
  );
};

export default DigitalPortfolio;